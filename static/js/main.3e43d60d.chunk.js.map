{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.3e43d60d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n  \t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n  \t  <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n  \t  <div>\r\n  \t    <h2>{name}</h2>\r\n  \t    <p>{email}</p>\r\n  \t  </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n\t  {\r\n\t  \trobots.map((user, i) => {\r\n\t\t  return ( \r\n\t\t    <Card \r\n\t\t  \t  key={i} \r\n\t\t  \t  id={robots[i].id} \r\n\t\t  \t  name={robots[i].name} \r\n\t\t  \t  email={robots[i].email}\r\n\t\t  \t  />\r\n\t\t  );\r\n\t    })\r\n\t  }\r\n\t</div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input \r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='Search robots'\r\n        onChange={searchChange} \r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n      <div style={{overflowY: 'scroll', border: '3px solid black', height: '800px'}}>\r\n        {props.children}\r\n      </div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n  \tconst filteredRobots = robots.filter(robots => {\r\n  \t  return robots.name.toLowerCase().includes(searchField.toLowerCase());\r\n  \t})\r\n  \treturn isPending ?\r\n  \t\t<h1>Loading</h1> :\r\n  \t  (\r\n        <div className='tc'>\r\n\t        <h1 className='f1'>RoboFriends</h1>\r\n\t        <SearchBox searchChange={onSearchChange} />\r\n\t        <Scroll>\r\n            <CardList robots={filteredRobots} />\r\n          </Scroll>\r\n\t      </div>\r\n\t    );\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED \r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type:CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t  .then(response=> response.json())\r\n\t  .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t  .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED \r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t  return Object.assign({}, state, { isPending: true })\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t  return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t  return Object.assign({}, state, { error: action.payload, isPending: false })\r\n\t\tdefault:\r\n\t\t  return state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n                <Provider store={store}>\n\t                <App />, \n\t              </Provider>, document.getElementById('root'));\n                \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}